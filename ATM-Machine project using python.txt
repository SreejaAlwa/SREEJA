import datetime
import sqlite3 as db
conn = db.connect("atm_database.db")
cursor = conn.cursor()


cursor.execute('''CREATE TABLE IF NOT EXISTS all_user22(account_no INT  PRIMARY KEY,FullName VARCHAR(15) NOT NULL,pin INT NOT NULL,
Address TEXT NOT NULL,Contact INT AUTO_INCREMENT,balance float(10) NOT NULL)''')
cursor.execute('''INSERT INTO all_user22 VALUES(67890439,'Mohammed Reshma',1345,'Bhupalpally',9493557891,59987.90)''')
cursor.execute('''INSERT INTO all_user22 VALUES(67567839,'Alwa Sreeja',1235,'Hyderabad',9456734501,58789.90)''')
cursor.execute('''SELECT * FROM all_user22''')
for i in cursor.fetchall():
    print(i)

class ATM:
    def __init__(self):
        self.account_no = None

    def login(self,account_no, pin):
        cursor.execute("SELECT * FROM all_user22 WHERE account_no = ? AND pin = ?", (account_no, pin))
        account = cursor.fetchone()
        if account:
            self.account_no = account_no
            print("Login successful!")
        else:
            print("Invalid account number or PIN.")

    def change_pin(self):
        if not self.account_no:
            print("Please log in first.")
            return

        old_pin = input("Enter your current PIN: ")

        cursor.execute("SELECT pin FROM all_user22 WHERE account_no = ?", (self.account_no,))
        current_pin = cursor.fetchone()[0]

        if str(current_pin) == old_pin:
            new_pin = input("Enter your new PIN: ")
            confirm_pin = input("Confirm your new PIN: ")

            if new_pin == confirm_pin:
                cursor.execute("UPDATE all_user22 SET pin = ? WHERE account_no = ?", (new_pin, self.account_no))
                conn.commit()
                print("PIN changed successfully!")
            else:
                print("PINs do not match. Try again.")
        else:
            print("Incorrect current PIN.")

    def check_balance(self):
        if self.account_no:
            cursor.execute("SELECT balance FROM all_user22 WHERE account_no = ?", (self.account_no,))
            balance = cursor.fetchone()[0]
            print(f"Your account balance is ${balance:.2f}")
        else:
            print("Please log in first.")

    def deposit(self, amount):
        if self.account_no:
            cursor.execute("UPDATE all_user22 SET balance = balance + ? WHERE account_no = ?", (amount, self.account_no))
            conn.commit()
            print(f"Deposited ${amount:.2f} successfully.")

        else:
            print("Please log in first.")

    def withdraw(self, amount):
        if self.account_no:
            cursor.execute("SELECT balance FROM all_user22 WHERE account_no = ?", (self.account_no,))
            balance = cursor.fetchone()[0]
            if balance >= amount:
                cursor.execute("UPDATE all_user22 SET balance = balance - ? WHERE account_no = ?", (amount, self.account_no))
                conn.commit()
                print(f"Withdrew ${amount:.2f} successfully.")

            else:
                print("Insufficient balance.")
        else:
            print("Please log in first.")
    def transfer_funds(self,sender_account_no, receiver_account_no, amount):
        cursor.execute("SELECT balance FROM all_user22 WHERE account_no=?",(sender_account_no,))
        sender_balance=cursor.fetchone()[0]
        cursor.execute("SELECT balance FROM all_user22 WHERE account_no=?",(receiver_account_no,))
        receiver_balance=cursor.fetchone()[0]
        if sender_balance>=amount:
            self.withdraw(amount)
            cursor.execute("UPDATE all_user22 SET balance=balance+? WHERE account_no=?",(amount,receiver_account_no))
            conn.commit()
            print(f"transfer(${amount:.2f} from account{sender_account_no}to account{receiver_account_no} completed")

        else:
            print("Transfer failed-Insufficient balance in sender account")

    def close_account(self):
        if self.account_no:
            cursor.execute("DELETE FROM all_user22 WHERE account_no = ?", (self.account_no,))
            conn.commit()
            self.account_no = None
            print("Account closed successfully.")
        else:
            print("Please log in first.")
    def logout(self):
        self.account_no = None
        print("Logged out successfully.")

if __name__ == "__main__":
    atm = ATM()
    while True:
        print("\nATM Menu:")
        print("1. Login")
        print("2. Change PIN")
        print("3. Check Balance")
        print("4. Deposit")
        print("5. Withdraw")
        print("6.Transfer Amount ")
        print("7. Close Account")
        print("8.Logout")
        choice = input("Enter your choice: ")
        if choice == "1":
            account_no = int(input("Enter your account number: "))
            pin = input("Enter your PIN: ")
            atm.login(account_no,pin)
        elif choice == "2":
            atm.change_pin()
        elif choice == "3":
            atm.check_balance()
        elif choice == "4":
            amount = float(input("Enter the deposit amount: $"))
            atm.deposit(amount)
        elif choice == "5":
            amount = float(input("Enter the withdrawal amount: $"))
            atm.withdraw(amount)
        elif choice == "6":
            sender_account_no = int(input("Enter your account number: "))
            receiver_account_no = int(input("Enter your account number you want to send to: "))
            amount=float(input("Enter the amount you to send"))
            atm.transfer_funds(sender_account_no,receiver_account_no,amount)
        elif choice == "7":
            atm.close_account()
        elif choice == "8":
            atm.logout()

            break

        else:
            print("Invalid choice. Please try again.")